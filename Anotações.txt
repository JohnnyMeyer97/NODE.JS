npm - Maior repositório de pacote do mundo
Express - Framework minimalista, principal ferramenta usada para criar aplicações backend usando o node.
Nodemon - Detecta alterações no código e atualiza o servidor automaticamente.
Sequelize - Modulo que ajuda a trabalhar com o banco de dados (mysql) diretamente com o node.js
Handlebars - template engine, dá muitas funcionalidades ao html
Body-parser - Módulo usado para processar dados enviados do corpo de uma requisição http
Mysql - Banco de dados, estrutura de tabelas
MongoDB - É um banco de dados de código aberto, de alta performance, sem esquemas e orientado á documentos, estrutura de documentos(Json) e não tabelas
Mongoose - Modulo que permite trabalhar com o MongoDB diretamente do Node. Mais simples e com muito mais recurso que o sequelize
Moment - Melhorar a visualização da data
bcryptjs - Para criar hash de senhas (encriptar senhas)
passport - sistema de autenticação
passport-local - estratégia usada dentro do passport de autenticação

---------------------------//---------------------------//---------------------------//---------------------------

No cmd aberto na pasta do projeto:
npm install express --save
npm install --save sequelize
npm install --save mysql2
npm install --save express-handlebars
npm install --save body-parser
npm install --save mongoose
npm install --save express-session
npm install --save connect-flash
npm install --save moment
npm install --save bcryptjs
npm install --save passport
npm install --save passport-local


npm -v: Verifica se o npm está instalado
npm install (nome pacote) --save(para salvar): sintaxe para instalar qualquer pacote
mysql -h localhost -u root -p: Para se conectar ao servidor local
	-h: Qual servidor se conectar
	-u: Usuario
	-p: senha

********** SENHA DO MYSQL: breno2015 ********** 

COMANDOS:

SHOW DATABASES; - Mostrar banco de dados
CREATE DATABASE [nomeDoBanco]; - Crair um banco de dados para armazenar algumas informações do seu projeto
USE [nomeDoBanco]; - Acessar um banco de dados específico
SHOW TABLES; - Verificar quais tabelas existem dentro do banco
DESCRIBE [nomeDaTabela]; - Mostrar estrutura da tabela
INSERT INTO [nomeDaTabela](camposQueIrãoReceber) VALUES(valoresDosCampos);- Inserir dados
SELECT * FROM [nomeDaTabela]; - Listar todos os dados da tabela
	* = Todos
WHERE - Listar específico
	SELECT * FROM [nomeDaTabela] WHERE [condição];
		ex.: SELECT * FROM usuarios WHERE nome = "Pedro";
DELETE FROM [nomeDaTabela]; - Deleta a tabela toda
DELETE FROM [nomeDaTabela] WHERE [registro]; - Deletar algum registro no bando de dados
	ex.: DELETE FROM usuarios WHERE nome = "Pedro";
UPDATE [nomeDaTabela] SET [qualDadoEspecífico] WHERE [condição]; - Atualizar/Alterar registros específico
	ex.: UPDATE usuarios SET nome = "Nome de Teste" WHERE nome = "Luis";
UPDATE [nomeDaTabela] SET [qualDadoEspecífico/campo] = valor WHERE [registro], [qualDadoEspecífico2/campo] = valor WHERE [registro] - Alterar mais de um campo



TIPOS: 

VARCHAR - Textos em geral
	VARCHAR(50) - Número de caracteres máximo, 255 máx.
CHAR - 	Caracteres
INT - Inteiro

node_modules: Todos os módulos que forem instalados no seu projeto estarão dentro desta pasta
-g: Flag que instala o módulo globalmente

Sobre a "Arrow Function" é importante salientar que ela tem algumas diferenças da "Normal Function". 
1) As arrow functions pegam o "this" do escopo que estão inseridas, já que não tem o próprio "this". 
2) Como a Arrow Function é anônima, precisa ser atribuída a uma variável, portanto só pode ser chamada após a sua 
	declaração.
3) Arrow function também não tem o próprio objeto "arguments", portanto uma solução para isso é utilizar o spread 
	operator "...arguments"

-------------------- MONGODB --------------------
show databases; - Mostrar bancos de dados (Se tiver banco de dados vazio não aparece na lista)
use "nomeDoBanco"; - Criar banco de dados
show collections - Mostrar collections
db."nomeCollection".find() - Listar dados da collection
